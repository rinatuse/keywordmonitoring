const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Telegraf } = require('telegraf');
const fs = require('fs');
const input = require('input');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_ID = 23305163;  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
const API_HASH = 'e39d80bf11e7f3464f4fdb54e0b6d71b';  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
const BOT_TOKEN = '7560225297:AAGg7FyjX51Rlbye1-hbqtWGDLd_YN3BH6Y';  // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TARGET_GROUP = '-1002455984825';  // ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

// –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const MONITORED_GROUPS = [
    '@tproger',
    'https://t.me/multievan',
];

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
const KEYWORDS = [
    'javascript',
    'node\\.js',
    'telegram bot',
    '–°–®–ê'  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "–°–®–ê", –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ –ª–æ–≥–∞—Ö
];

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
const SESSION_FILE = 'session.json';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const LAST_MESSAGES_FILE = 'last_messages.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
let stringSession = new StringSession('');
if (fs.existsSync(SESSION_FILE)) {
    const sessionData = fs.readFileSync(SESSION_FILE, 'utf-8');
    stringSession = new StringSession(sessionData);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let lastMessageIds = {};
try {
    lastMessageIds = JSON.parse(fs.readFileSync(LAST_MESSAGES_FILE, 'utf-8'));
} catch (error) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    lastMessageIds = {};
    MONITORED_GROUPS.forEach(group => {
        lastMessageIds[group] = 0;
    });
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
const client = new TelegramClient(
    stringSession,
    API_ID,
    API_HASH,
    { connectionRetries: 5 }
);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
function getChannelNameFromLink(groupLink) {
    if (groupLink.startsWith('https://t.me/')) {
        return groupLink.substring('https://t.me/'.length);
    } else if (groupLink.startsWith('t.me/')) {
        return groupLink.substring('t.me/'.length);
    } else if (groupLink.startsWith('@')) {
        return groupLink.substring(1);
    }
    return groupLink;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function checkNewMessages() {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    console.log('–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', KEYWORDS);

    for (const group of MONITORED_GROUPS) {
        try {
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É ${group}...`);

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            const channelName = getChannelNameFromLink(group);

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            const entity = await client.getEntity(channelName);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messages = await client.getMessages(entity, { limit: 20 });

            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${group}`);

            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for (const message of [...messages].reverse()) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.id <= (lastMessageIds[group] || 0)) {
                    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}], —Ç.–∫. –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastMessageIds[group] || 0})`);
                    continue;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                lastMessageIds[group] = message.id;

                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if (message.message) {
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...`);
                    console.log(`–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.message.substring(0, 100)}...`);

                    for (const keyword of KEYWORDS) {
                        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                        const regex = new RegExp(keyword, 'i');
                        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '${keyword}'`);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                        if (regex.test(message.message)) {
                            console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}`);

                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            const groupName = getChannelNameFromLink(group);
                            const messageLink = `https://t.me/${groupName}/${message.id}`;

                            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is too long"
                            const maxMessageLength = 3000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
                            let messageText = message.message;

                            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                            if (messageText.length > maxMessageLength - 200) { // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                                messageText = messageText.substring(0, maxMessageLength - 250) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]';
                            }

                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            await bot.telegram.sendMessage(
                                TARGET_GROUP,
                                `üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}:\n\n` +
                                `${messageText}\n\n` +
                                `üîó –°—Å—ã–ª–∫–∞: ${messageLink}`
                            );
                            break;
                        }
                    }
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã ${group}:`, error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    fs.writeFileSync(LAST_MESSAGES_FILE, JSON.stringify(lastMessageIds));

    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ lastMessageIds –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('–¢–µ–∫—É—â–∏–µ lastMessageIds:', JSON.stringify(lastMessageIds));
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');

    await checkNewMessages().catch(console.error);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
        await checkNewMessages().catch(console.error);
    }, 5 * 60 * 1000);
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
bot.command('start', (ctx) => {
    ctx.reply('–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω! –Ø —Å–ª–µ–∂—É –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
bot.command('add_keyword', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /add_keyword javascript');
    }

    const newKeyword = args[1];

    if (!KEYWORDS.includes(newKeyword)) {
        KEYWORDS.push(newKeyword);
        ctx.reply(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } else {
        ctx.reply(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.command('list_keywords', (ctx) => {
    if (KEYWORDS.length === 0) {
        return ctx.reply('–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    KEYWORDS.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
    });

    ctx.reply(message);
});

bot.command('check', async (ctx) => {
    ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await checkNewMessages().catch(console.error);
    ctx.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('add_group', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /add_group @channel_name –∏–ª–∏ /add_group https://t.me/channel_name');
    }

    const newGroup = args[1];

    if (!MONITORED_GROUPS.includes(newGroup)) {
        MONITORED_GROUPS.push(newGroup);
        lastMessageIds[newGroup] = 0;
        fs.writeFileSync(LAST_MESSAGES_FILE, JSON.stringify(lastMessageIds));
        ctx.reply(`–ì—Ä—É–ø–ø–∞ ${newGroup} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } else {
        ctx.reply(`–ì—Ä—É–ø–ø–∞ ${newGroup} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('list_groups', (ctx) => {
    if (MONITORED_GROUPS.length === 0) {
        return ctx.reply('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = '–ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    MONITORED_GROUPS.forEach((group, index) => {
        message += `${index + 1}. ${group}\n`;
    });

    ctx.reply(message);
});

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    await client.start({
        phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
        password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è): '),
        phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram: '),
        onError: (err) => console.log(err),
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const sessionString = client.session.save();
    fs.writeFileSync(SESSION_FILE, sessionString);

    console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram!');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await startMonitoring();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
    bot.stop('SIGINT');
    client.disconnect();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
});
process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    client.disconnect();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
});