const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const input = require('input');
const mongoose = require('mongoose');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_ID = 23305163;
const API_HASH = 'e39d80bf11e7f3464f4fdb54e0b6d71b';
const BOT_TOKEN = '7560225297:AAGg7FyjX51Rlbye1-hbqtWGDLd_YN3BH6Y';
const TARGET_GROUP = '-1002455984825';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const SESSION_FILE = 'session.json';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/telegram_monitor', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
}).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º MongoDB
const ConfigSchema = new mongoose.Schema({
    monitoredGroups: [String],
    keywords: [String],
    commentKeywords: [String],
    checkInterval: { type: Number, default: 5 }
});

const LastMessageSchema = new mongoose.Schema({
    groupId: { type: String, required: true, unique: true },
    lastMessageId: { type: Number, default: 0 }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const Config = mongoose.model('Config', ConfigSchema);
const LastMessage = mongoose.model('LastMessage', LastMessageSchema);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let config = {
    monitoredGroups: [],
    keywords: [],
    commentKeywords: [],
    checkInterval: 5 // –º–∏–Ω—É—Ç—ã
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let isMonitoringActive = false;
let monitoringInterval = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
let stringSession = new StringSession('');
if (fs.existsSync(SESSION_FILE)) {
    const sessionData = fs.readFileSync(SESSION_FILE, 'utf-8');
    stringSession = new StringSession(sessionData);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
const client = new TelegramClient(
    stringSession,
    API_ID,
    API_HASH,
    { connectionRetries: 5 }
);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
function getChannelNameFromLink(groupLink) {
    if (groupLink.startsWith('https://t.me/')) {
        return groupLink.substring('https://t.me/'.length);
    } else if (groupLink.startsWith('t.me/')) {
        return groupLink.substring('t.me/'.length);
    } else if (groupLink.startsWith('@')) {
        return groupLink.substring(1);
    }
    return groupLink;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ MongoDB
async function loadConfig() {
    try {
        let configData = await Config.findOne();

        if (!configData) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            configData = new Config({
                monitoredGroups: ['@tproger', 'https://t.me/multievan'],
                keywords: ['javascript', 'node\\.js', 'telegram bot', '–°–®–ê'],
                commentKeywords: ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–º–æ–≥–∏—Ç–µ'],
                checkInterval: 5
            });
            await configData.save();
            console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        config = configData.toObject();
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', config);
        return config;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function saveConfig() {
    try {
        let configData = await Config.findOne();

        if (!configData) {
            configData = new Config(config);
        } else {
            configData.monitoredGroups = config.monitoredGroups;
            configData.keywords = config.keywords;
            configData.commentKeywords = config.commentKeywords;
            configData.checkInterval = config.checkInterval;
        }

        await configData.save();
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function checkNewMessages() {
    if (!isMonitoringActive) {
        console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return;
    }

    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    console.log('–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', config.keywords);
    console.log('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', config.commentKeywords);

    for (const group of config.monitoredGroups) {
        try {
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É ${group}...`);

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            const channelName = getChannelNameFromLink(group);

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            const entity = await client.getEntity(channelName);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messages = await client.getMessages(entity, { limit: 20 });

            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${group}`);

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            let lastMessageData = await LastMessage.findOne({ groupId: group });

            if (!lastMessageData) {
                lastMessageData = new LastMessage({ groupId: group, lastMessageId: 0 });
                await lastMessageData.save();
            }

            const lastMessageId = lastMessageData.lastMessageId;

            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for (const message of [...messages].reverse()) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.id <= lastMessageId) {
                    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}], —Ç.–∫. –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastMessageId})`);
                    continue;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await LastMessage.findOneAndUpdate(
                    { groupId: group },
                    { lastMessageId: message.id },
                    { upsert: true }
                );

                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if (message.message) {
                    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...`);
                    console.log(`–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.message.substring(0, 100)}...`);

                    let foundKeyword = null;
                    let shouldCheckComments = false;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    for (const keyword of config.keywords) {
                        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                        const regex = new RegExp(keyword, 'i');
                        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '${keyword}'`);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                        if (regex.test(message.message)) {
                            console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}`);
                            foundKeyword = keyword;
                            shouldCheckComments = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            const groupName = getChannelNameFromLink(group);
                            const messageLink = `https://t.me/${groupName}/${message.id}`;

                            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            const maxMessageLength = 3000;
                            let messageText = message.message;

                            if (messageText.length > maxMessageLength - 200) {
                                messageText = messageText.substring(0, maxMessageLength - 250) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]';
                            }

                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            await bot.telegram.sendMessage(
                                TARGET_GROUP,
                                `üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}:\n\n` +
                                `${messageText}\n\n` +
                                `üîó –°—Å—ã–ª–∫–∞: ${messageLink}`
                            );
                            break;
                        }
                    }

                    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–æ—Å—Ç–µ –∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤,
                    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É
                    if (shouldCheckComments && config.commentKeywords.length > 0) {
                        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]...`);

                        try {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                            if (message.replies) {
                                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
                                const comments = await client.getMessages(entity, {
                                    replyTo: message.id,
                                    limit: 100 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                                });

                                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]`);

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                                for (const comment of comments) {
                                    if (comment.message) {
                                        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π [ID: ${comment.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...`);

                                        for (const commentKeyword of config.commentKeywords) {
                                            const commentRegex = new RegExp(commentKeyword, 'i');

                                            if (commentRegex.test(comment.message)) {
                                                console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${commentKeyword}' –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ [ID: ${comment.id}]`);

                                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                                const groupName = getChannelNameFromLink(group);
                                                const messageLink = `https://t.me/${groupName}/${message.id}?comment=${comment.id}`;

                                                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                                const maxCommentLength = 1000;
                                                let commentText = comment.message;

                                                if (commentText.length > maxCommentLength - 100) {
                                                    commentText = commentText.substring(0, maxCommentLength - 150) + '...\n[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω]';
                                                }

                                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–ª—é—á–µ–≤–æ–º —Å–ª–æ–≤–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                                                await bot.telegram.sendMessage(
                                                    TARGET_GROUP,
                                                    `üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${foundKeyword}' –≤ –ø–æ—Å—Ç–µ –∏ '${commentKeyword}' –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –≥—Ä—É–ø–ø–µ ${group}:\n\n` +
                                                    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentText}\n\n` +
                                                    `üîó –°—Å—ã–ª–∫–∞: ${messageLink}`
                                                );
                                                break; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                                            }
                                        }
                                    }
                                }
                            } else {
                                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã`);
                            }
                        } catch (error) {
                            if (error.errorMessage === 'MSG_ID_INVALID') {
                                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º`);
                            } else {
                                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]:`, error);
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã ${group}:`, error);
        }
    }

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
    if (isMonitoringActive) {
        return '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!';
    }

    isMonitoringActive = true;

    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    await checkNewMessages().catch(console.error);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    monitoringInterval = setInterval(async () => {
        await checkNewMessages().catch(console.error);
    }, config.checkInterval * 60 * 1000);

    return '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function stopMonitoring() {
    if (!isMonitoringActive) {
        return '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!';
    }

    isMonitoringActive = false;

    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
    }

    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return 'üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_monitoring';
}

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setUserState(userId, state) {
    userStates[userId] = state;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(userId) {
    return userStates[userId] || {};
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
const mainMenuKeyboard = Markup.keyboard([
    ['‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üìã –ì—Ä—É–ø–ø—ã'],
    ['üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ['üìä –°—Ç–∞—Ç—É—Å', '‚ùì –ü–æ–º–æ—â—å']
]).resize();

const controlMenuKeyboard = Markup.keyboard([
    ['‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'],
    ['üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const groupsMenuKeyboard = Markup.keyboard([
    ['üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const keywordsMenuKeyboard = Markup.keyboard([
    ['üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'],
    ['üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const settingsMenuKeyboard = Markup.keyboard([
    ['‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu(ctx) {
    return ctx.reply(
        'üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:',
        mainMenuKeyboard
    );
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
bot.command('start', (ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:\n' +
        '‚ñ∂Ô∏è /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '‚èπÔ∏è /stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        'üîç /check_now - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å\n' +
        'üìã /list_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        '‚ûï /add_group [—Å—Å—ã–ª–∫–∞] - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '‚ûñ /remove_group [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        'üìù /list_keywords - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n' +
        '‚ûï /add_keyword [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '‚ûñ /remove_keyword [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '‚öôÔ∏è /set_interval [–º–∏–Ω—É—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n' +
        'üìä /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
    ).then(() => {
        showMainMenu(ctx);
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('start_monitoring', async (ctx) => {
    const result = await startMonitoring();
    ctx.reply(result);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('stop_monitoring', (ctx) => {
    const result = stopMonitoring();
    ctx.reply(result);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–π—á–∞—Å
bot.command('check_now', async (ctx) => {
    ctx.reply('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await checkNewMessages().catch(console.error);
    ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
bot.command('add_keyword', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /add_keyword javascript');
    }

    const newKeyword = args.slice(1).join(' ');

    if (!config.keywords.includes(newKeyword)) {
        config.keywords.push(newKeyword);
        await saveConfig();
        ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } else {
        ctx.reply(`‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
bot.command('remove_keyword', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove_keyword 1');
    }

    const keywordIndex = parseInt(args[1]) - 1;

    if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.keywords.length) {
        return ctx.reply(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.keywords.length}.`);
    }

    const removedKeyword = config.keywords[keywordIndex];
    config.keywords.splice(keywordIndex, 1);
    await saveConfig();

    ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.command('list_keywords', (ctx) => {
    if (config.keywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    config.keywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
    });

    ctx.reply(message);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('add_group', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /add_group @channel_name –∏–ª–∏ /add_group https://t.me/channel_name');
    }

    const newGroup = args[1];

    if (!config.monitoredGroups.includes(newGroup)) {
        config.monitoredGroups.push(newGroup);
        await saveConfig();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await LastMessage.findOneAndUpdate(
            { groupId: newGroup },
            { lastMessageId: 0 },
            { upsert: true }
        );

        ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ ${newGroup} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } else {
        ctx.reply(`‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ ${newGroup} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('remove_group', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove_group 1');
    }

    const groupIndex = parseInt(args[1]) - 1;

    if (isNaN(groupIndex) || groupIndex < 0 || groupIndex >= config.monitoredGroups.length) {
        return ctx.reply(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.monitoredGroups.length}.`);
    }

    const removedGroup = config.monitoredGroups[groupIndex];
    config.monitoredGroups.splice(groupIndex, 1);
    await saveConfig();

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await LastMessage.deleteOne({ groupId: removedGroup });

    ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ ${removedGroup} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('list_groups', (ctx) => {
    if (config.monitoredGroups.length === 0) {
        return ctx.reply('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    config.monitoredGroups.forEach((group, index) => {
        message += `${index + 1}. ${group}\n`;
    });

    ctx.reply(message);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.command('set_interval', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: /set_interval 10');
    }

    const newInterval = parseInt(args[1]);

    if (isNaN(newInterval) || newInterval < 1) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
    }

    config.checkInterval = newInterval;
    await saveConfig();

    // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (isMonitoringActive && monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = setInterval(async () => {
            await checkNewMessages().catch(console.error);
        }, config.checkInterval * 60 * 1000);
    }

    ctx.reply(`‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.command('status', (ctx) => {
    const status = isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

    let message = `üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status}\n`;
    message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n`;
    message += `üëÅÔ∏è –ì—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${config.monitoredGroups.length}\n`;
    message += `üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${config.keywords.length}\n`;
    message += `üí¨ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${config.commentKeywords.length}`;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const inlineKeyboard = isMonitoringActive
        ? Markup.inlineKeyboard([
            Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ])
        : Markup.inlineKeyboard([
            Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ]);

    ctx.reply(message, inlineKeyboard);
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
bot.command('list_comment_keywords', (ctx) => {
    if (config.commentKeywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
    }

    let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
    config.commentKeywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
    });

    ctx.reply(message);
});

bot.command('add_comment_keyword', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n–ü—Ä–∏–º–µ—Ä: /add_comment_keyword javascript');
    }

    const newKeyword = args.slice(1).join(' ');

    if (!config.commentKeywords.includes(newKeyword)) {
        config.commentKeywords.push(newKeyword);
        await saveConfig();
        ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
    } else {
        ctx.reply(`‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
    }
});

bot.command('remove_comment_keyword', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n–ü—Ä–∏–º–µ—Ä: /remove_comment_keyword 1');
    }

    const keywordIndex = parseInt(args[1]) - 1;

    if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.commentKeywords.length) {
        return ctx.reply(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.commentKeywords.length}.`);
    }

    const removedKeyword = config.commentKeywords[keywordIndex];
    config.commentKeywords.splice(keywordIndex, 1);
    await saveConfig();

    ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.hears('‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', controlMenuKeyboard);
});

bot.hears('üìã –ì—Ä—É–ø–ø—ã', (ctx) => {
    ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', groupsMenuKeyboard);
});

bot.hears('üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', (ctx) => {
    ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:', keywordsMenuKeyboard);
});

bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => {
    ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', settingsMenuKeyboard);
});

bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
    showMainMenu(ctx);
});

bot.hears('üìä –°—Ç–∞—Ç—É—Å', (ctx) => {
    ctx.replyWithChatAction('typing');
    const status = isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

    let message = `üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status}\n`;
    message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n`;
    message += `üëÅÔ∏è –ì—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${config.monitoredGroups.length}\n`;
    message += `üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${config.keywords.length}\n`;
    message += `üí¨ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${config.commentKeywords.length}`;

    const inlineKeyboard = isMonitoringActive
        ? Markup.inlineKeyboard([
            Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ])
        : Markup.inlineKeyboard([
            Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ]);

    ctx.reply(message, inlineKeyboard);
});

bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
    ctx.reply(
        '‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n' +
        '<b>‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> - –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        '<b>üìã –ì—Ä—É–ø–ø—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        '<b>üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n' +
        '<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n' +
        '<b>üìä –°—Ç–∞—Ç—É—Å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞\n\n' +
        '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é:\n' +
        '/start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '/stop_monitoring - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '/check_now - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n' +
        '/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å',
        { parse_mode: 'HTML' }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
bot.hears('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx) => {
    ctx.replyWithChatAction('typing');
    const result = await startMonitoring();
    ctx.reply(result);
});

bot.hears('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', (ctx) => {
    ctx.replyWithChatAction('typing');
    const result = stopMonitoring();
    ctx.reply(result);
});

bot.hears('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', async (ctx) => {
    ctx.replyWithChatAction('typing');
    await ctx.reply('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await checkNewMessages().catch(console.error);
    ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
bot.hears('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', async (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.monitoredGroups.length === 0) {
        return ctx.reply('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    const buttons = [];

    config.monitoredGroups.forEach((group, index) => {
        message += `${index + 1}. ${group}\n`;
        buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_group_${index}`)]);
    });

    const inlineKeyboard = Markup.inlineKeyboard([
        ...buttons,
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', 'add_group_dialog')]
    ]);

    ctx.reply(message, inlineKeyboard);
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', (ctx) => {
    ctx.replyWithChatAction('typing');
    ctx.reply(
        '‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '/add_group @channel_name\n' +
        '–∏–ª–∏\n' +
        '/add_group https://t.me/channel_name'
    );
});

bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.monitoredGroups.length === 0) {
        return ctx.reply('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
    const buttons = [];

    config.monitoredGroups.forEach((group, index) => {
        message += `${index + 1}. ${group}\n`;
        buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${group}`, `remove_group_${index}`)]);
    });

    ctx.reply(message, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
bot.hears('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.keywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
    const buttons = [];

    config.keywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
        buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_keyword_${index}`)]);
    });

    const inlineKeyboard = Markup.inlineKeyboard([
        ...buttons,
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_keyword_dialog')]
    ]);

    ctx.reply(message, inlineKeyboard);
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', (ctx) => {
    ctx.replyWithChatAction('typing');
    ctx.reply(
        '‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '/add_keyword javascript\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n' +
        '/add_keyword javascript, python, telegram'
    );
});

bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.keywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    }

    let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
    const buttons = [];

    config.keywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
        buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${keyword}`, `remove_keyword_${index}`)]);
    });

    ctx.reply(message, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.hears('‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', (ctx) => {
    ctx.replyWithChatAction('typing');
    const buttons = [
        [
            Markup.button.callback('1 –º–∏–Ω—É—Ç–∞', 'set_interval_1'),
            Markup.button.callback('5 –º–∏–Ω—É—Ç', 'set_interval_5'),
            Markup.button.callback('10 –º–∏–Ω—É—Ç', 'set_interval_10')
        ],
        [
            Markup.button.callback('15 –º–∏–Ω—É—Ç', 'set_interval_15'),
            Markup.button.callback('30 –º–∏–Ω—É—Ç', 'set_interval_30'),
            Markup.button.callback('1 —á–∞—Å', 'set_interval_60')
        ]
    ];

    ctx.reply(
        `‚è±Ô∏è –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
        '/set_interval [–º–∏–Ω—É—Ç—ã]',
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
bot.hears('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.commentKeywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
    }

    let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
    const buttons = [];

    config.commentKeywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
        buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_comment_keyword_${index}`)]);
    });

    const inlineKeyboard = Markup.inlineKeyboard([
        ...buttons,
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_comment_keyword_dialog')]
    ]);

    ctx.reply(message, inlineKeyboard);
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', (ctx) => {
    ctx.replyWithChatAction('typing');
    ctx.reply(
        '‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '/add_comment_keyword javascript\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n' +
        '/add_comment_keyword javascript, python, telegram'
    );
});

bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', (ctx) => {
    ctx.replyWithChatAction('typing');
    if (config.commentKeywords.length === 0) {
        return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
    }

    let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
    const buttons = [];

    config.commentKeywords.forEach((keyword, index) => {
        message += `${index + 1}. ${keyword}\n`;
        buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${keyword}`, `remove_comment_keyword_${index}`)]);
    });

    ctx.reply(message, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.action('start_monitoring', async (ctx) => {
    await ctx.answerCbQuery('–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
    const result = await startMonitoring();
    await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n' + result);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([
        Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring'),
        Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
    ]).reply_markup);
});

bot.action('stop_monitoring', async (ctx) => {
    await ctx.answerCbQuery('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
    const result = stopMonitoring();
    await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n' + result);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([
        Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring'),
        Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
    ]).reply_markup);
});

bot.action('check_now', async (ctx) => {
    await ctx.answerCbQuery('–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await checkNewMessages().catch(console.error);
    await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
bot.action('add_group_dialog', async (ctx) => {
    await ctx.answerCbQuery();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserState(ctx.from.id, { waitingForGroup: true });
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name –∏–ª–∏ https://t.me/channel_name):');
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
bot.action('add_keyword_dialog', async (ctx) => {
    await ctx.answerCbQuery();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserState(ctx.from.id, { waitingForKeyword: true });
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
const groupRemovePattern = /remove_group_(\d+)/;
bot.action(groupRemovePattern, async (ctx) => {
    const match = ctx.callbackQuery.data.match(groupRemovePattern);
    if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

    const groupIndex = parseInt(match[1]);

    if (isNaN(groupIndex) || groupIndex < 0 || groupIndex >= config.monitoredGroups.length) {
        return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!');
    }

    const removedGroup = config.monitoredGroups[groupIndex];
    config.monitoredGroups.splice(groupIndex, 1);
    await saveConfig();

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await LastMessage.deleteOne({ groupId: removedGroup });

    await ctx.answerCbQuery(`–ì—Ä—É–ø–ø–∞ ${removedGroup} —É–¥–∞–ª–µ–Ω–∞!`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (config.monitoredGroups.length === 0) {
        await ctx.editMessageText('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    } else {
        let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        const buttons = [];

        config.monitoredGroups.forEach((group, index) => {
            message += `${index + 1}. ${group}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_group_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', 'add_group_dialog')]
        ]);

        await ctx.editMessageText(message, inlineKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
const keywordRemovePattern = /remove_keyword_(\d+)/;
bot.action(keywordRemovePattern, async (ctx) => {
    const match = ctx.callbackQuery.data.match(keywordRemovePattern);
    if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

    const keywordIndex = parseInt(match[1]);

    if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.keywords.length) {
        return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞!');
    }

    const removedKeyword = config.keywords[keywordIndex];
    config.keywords.splice(keywordIndex, 1);
    await saveConfig();

    await ctx.answerCbQuery(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ!`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (config.keywords.length === 0) {
        await ctx.editMessageText('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
    } else {
        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        const buttons = [];

        config.keywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_keyword_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_keyword_dialog')]
        ]);

        await ctx.editMessageText(message, inlineKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
const intervalPattern = /set_interval_(\d+)/;
bot.action(intervalPattern, async (ctx) => {
    const match = ctx.callbackQuery.data.match(intervalPattern);
    if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

    const newInterval = parseInt(match[1]);

    if (isNaN(newInterval) || newInterval < 1) {
        return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª!');
    }

    config.checkInterval = newInterval;
    await saveConfig();

    // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (isMonitoringActive && monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = setInterval(async () => {
            await checkNewMessages().catch(console.error);
        }, config.checkInterval * 60 * 1000);
    }

    await ctx.answerCbQuery(`–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç!`);
    await ctx.editMessageText(`‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç.`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
bot.action('add_comment_keyword_dialog', async (ctx) => {
    await ctx.answerCbQuery();
    setUserState(ctx.from.id, { waitingForCommentKeyword: true });
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const commentKeywordRemovePattern = /remove_comment_keyword_(\d+)/;
bot.action(commentKeywordRemovePattern, async (ctx) => {
    const match = ctx.callbackQuery.data.match(commentKeywordRemovePattern);
    if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

    const keywordIndex = parseInt(match[1]);

    if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.commentKeywords.length) {
        return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞!');
    }

    const removedKeyword = config.commentKeywords[keywordIndex];
    config.commentKeywords.splice(keywordIndex, 1);
    await saveConfig();

    await ctx.answerCbQuery(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (config.commentKeywords.length === 0) {
        await ctx.editMessageText('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
    } else {
        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
        const buttons = [];

        config.commentKeywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_comment_keyword_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_comment_keyword_dialog')]
        ]);

        await ctx.editMessageText(message, inlineKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.on('text', async (ctx) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const state = getUserState(ctx.from.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
    if (state.waitingForGroup) {
        const newGroup = ctx.message.text.trim();

        if (!config.monitoredGroups.includes(newGroup)) {
            config.monitoredGroups.push(newGroup);
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await LastMessage.findOneAndUpdate(
                { groupId: newGroup },
                { lastMessageId: 0 },
                { upsert: true }
            );
            await saveConfig();
            ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ ${newGroup} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        } else {
            ctx.reply(`‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ ${newGroup} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        setUserState(ctx.from.id, {});
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    if (state.waitingForKeyword) {
        const newKeyword = ctx.message.text.trim();

        if (!config.keywords.includes(newKeyword)) {
            config.keywords.push(newKeyword);
            await saveConfig();
            ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        } else {
            ctx.reply(`‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        setUserState(ctx.from.id, {});
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (state.waitingForCommentKeyword) {
        const newKeyword = ctx.message.text.trim();

        if (!config.commentKeywords.includes(newKeyword)) {
            config.commentKeywords.push(newKeyword);
            await saveConfig();
            ctx.reply(`‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
        } else {
            ctx.reply(`‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        setUserState(ctx.from.id, {});
        return;
    }
});

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
async function migrateFromJson() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ MongoDB
        const configExists = await Config.countDocuments();
        const lastMessageExists = await LastMessage.countDocuments();

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ MongoDB, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if (configExists > 0 || lastMessageExists > 0) {
            console.log('–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ MongoDB, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        if (!fs.existsSync('config.json') || !fs.existsSync('last_messages.json')) {
            console.log('–§–∞–π–ª—ã JSON –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
        const configData = JSON.parse(fs.readFileSync('config.json', 'utf-8'));
        const lastMessagesData = JSON.parse(fs.readFileSync('last_messages.json', 'utf-8'));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ MongoDB
        const newConfig = new Config({
            monitoredGroups: configData.monitoredGroups || [],
            keywords: configData.keywords || [],
            commentKeywords: configData.commentKeywords || [],
            checkInterval: configData.checkInterval || 5
        });
        await newConfig.save();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        for (const [groupId, lastMessageId] of Object.entries(lastMessagesData)) {
            const newLastMessage = new LastMessage({
                groupId,
                lastMessageId
            });
            await newLastMessage.save();
        }

        console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ JSON-—Ñ–∞–π–ª–æ–≤
        fs.renameSync('config.json', 'config.json.bak');
        fs.renameSync('last_messages.json', 'last_messages.json.bak');

        console.log('–°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ JSON-—Ñ–∞–π–ª–æ–≤');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB:', error);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    await migrateFromJson();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const configData = await loadConfig();
    if (configData) {
        config = configData;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    await client.start({
        phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
        password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è): '),
        phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram: '),
        onError: (err) => console.log(err),
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const sessionString = client.session.save();
    fs.writeFileSync(SESSION_FILE, sessionString);

    console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram!');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    try {
        await bot.telegram.sendMessage(
            TARGET_GROUP,
            'ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
            mainMenuKeyboard
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
    stopMonitoring();
    bot.stop('SIGINT');
    client.disconnect();
    mongoose.connection.close();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
});

process.once('SIGTERM', () => {
    stopMonitoring();
    bot.stop('SIGTERM');
    client.disconnect();
    mongoose.connection.close();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
});