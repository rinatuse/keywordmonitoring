const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const input = require('input');
const mongoose = require('mongoose');
const { Api } = require('telegram');
const { waitForDebugger } = require('inspector');



// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_ID = 23305163;
const API_HASH = 'e39d80bf11e7f3464f4fdb54e0b6d71b';
const BOT_TOKEN = '7560225297:AAGg7FyjX51Rlbye1-hbqtWGDLd_YN3BH6Y';
const TARGET_GROUP = '-1002455984825';


// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const SESSION_FILE = 'session.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const password = encodeURIComponent('34A=C1lt1{QllX'); // –ó–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è rinat
mongoose.connect(`mongodb://rinat:${password}@92.53.105.80:27017/telegram_monitor`, {
    authSource: 'admin',
    serverSelectionTimeoutMS: 30000,
    socketTimeoutMS: 45000,
    connectTimeoutMS: 30000
}).then(() => {
    console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
}).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º MongoDB
const ConfigSchema = new mongoose.Schema({
    monitoredGroups: [String],
    keywords: [String],
    commentKeywords: [String],
    checkInterval: { type: Number, default: 5 }
});

const LastMessageSchema = new mongoose.Schema({
    groupId: { type: String, required: true, unique: true },
    lastMessageId: { type: Number, default: 0 }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const Config = mongoose.model('Config', ConfigSchema);
const LastMessage = mongoose.model('LastMessage', LastMessageSchema);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let config = {
    monitoredGroups: [],
    keywords: [],
    commentKeywords: [],
    checkInterval: 5 // –º–∏–Ω—É—Ç—ã
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let isMonitoringActive = false;
let monitoringInterval = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
let pendingMatches = {
    keywords: [],
    comments: []
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
let stringSession = new StringSession('');
if (fs.existsSync(SESSION_FILE)) {
    const sessionData = fs.readFileSync(SESSION_FILE, 'utf-8');
    stringSession = new StringSession(sessionData);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
const client = new TelegramClient(
    stringSession,
    API_ID,
    API_HASH,
    {
        connectionRetries: 10,      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        useWSS: true,              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        requestRetries: 5,          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        timeout: 180000,            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 3 –º–∏–Ω—É—Ç (180000 –º—Å)
        maxConcurrentDownloads: 3   // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    }
);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const bot = new Telegraf(BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
function getChannelNameFromLink(groupLink) {
    if (groupLink.startsWith('https://t.me/')) {
        return groupLink.substring('https://t.me/'.length);
    } else if (groupLink.startsWith('t.me/')) {
        return groupLink.substring('t.me/'.length);
    } else if (groupLink.startsWith('@')) {
        return groupLink.substring(1);
    }
    return groupLink;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
async function safeApiRequest(requestFunction, fallbackValue = null, timeoutMs = 60000) {
    return new Promise(async (resolve) => {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        const timeoutId = setTimeout(() => {
            console.log(`–ó–∞–ø—Ä–æ—Å –∫ Telegram API –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${timeoutMs}ms)`);
            resolve(fallbackValue);
        }, timeoutMs);

        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            const result = await requestFunction();
            clearTimeout(timeoutId);
            resolve(result);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API:', error);
            clearTimeout(timeoutId);
            resolve(fallbackValue);
        }
    });
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
async function getMessagesWithTimeout(entity, params, timeoutMs = 30000) {
    return safeApiRequest(
        async () => await client.getMessages(entity, params),
        [], // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ç–∞–π–º–∞—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        timeoutMs
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ MongoDB
async function loadConfig() {
    try {
        let configData = await Config.findOne();

        if (!configData) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            configData = new Config({
                monitoredGroups: ['@tproger', 'https://t.me/multievan'],
                keywords: ['javascript', 'node\\.js', 'telegram bot', '–°–®–ê'],
                commentKeywords: ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–º–æ–≥–∏—Ç–µ'],
                checkInterval: 5
            });
            await configData.save();
            console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        config = configData.toObject();
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', config);
        return config;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function saveConfig() {
    try {
        let configData = await Config.findOne();

        if (!configData) {
            configData = new Config(config);
        } else {
            configData.monitoredGroups = config.monitoredGroups;
            configData.keywords = config.keywords;
            configData.commentKeywords = config.commentKeywords;
            configData.checkInterval = config.checkInterval;
        }

        await configData.save();
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ Too Many Requests
async function safeSendMessage(chatId, text, extra = {}) {
    try {
        await bot.telegram.sendMessage(chatId, text, extra);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delay(1000);
    } catch (error) {
        if (error.response && error.response.error_code === 429) {
            const retryAfter = error.response.parameters.retry_after || 30;
            console.log(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥...`);
            await delay(retryAfter * 1000 + 500); // –î–æ–±–∞–≤–ª—è–µ–º 0.5 —Å–µ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            try {
                await bot.telegram.sendMessage(chatId, text, extra);
            } catch (retryError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', retryError);
            }
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
async function sendPendingMatches() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (pendingMatches.keywords.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
        const groupedKeywords = {};
        for (const match of pendingMatches.keywords) {
            if (!groupedKeywords[match.group]) {
                groupedKeywords[match.group] = [];
            }
            groupedKeywords[match.group].push(match);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (const group in groupedKeywords) {
            const matches = groupedKeywords[group];
            if (matches.length <= 3) {
                // –ï—Å–ª–∏ –º–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for (const match of matches) {
                    await safeSendMessage(
                        TARGET_GROUP,
                        `üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${match.keyword}' –≤ –≥—Ä—É–ø–ø–µ ${match.group}:\n\n` +
                        `${match.messageText}\n\n` +
                        `üîó –°—Å—ã–ª–∫–∞: ${match.messageLink}`
                    );
                }
            } else {
                // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö
                let message = `üîç –ù–∞–π–¥–µ–Ω–æ ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ${group}:\n\n`;
                for (let i = 0; i < matches.length; i++) {
                    message += `${i + 1}. '${matches[i].keyword}' - ${matches[i].messageLink}\n`;
                }
                await safeSendMessage(TARGET_GROUP, message);
            }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        pendingMatches.keywords = [];
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    if (pendingMatches.comments.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
        const groupedComments = {};
        for (const match of pendingMatches.comments) {
            if (!groupedComments[match.group]) {
                groupedComments[match.group] = [];
            }
            groupedComments[match.group].push(match);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (const group in groupedComments) {
            const matches = groupedComments[group];
            if (matches.length <= 3) {
                // –ï—Å–ª–∏ –º–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for (const match of matches) {
                    await safeSendMessage(
                        TARGET_GROUP,
                        `üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${match.keyword}' –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –≥—Ä—É–ø–ø–µ ${match.group}:\n\n` +
                        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${match.commentText}\n\n` +
                        `üîó –°—Å—ã–ª–∫–∞: ${match.commentLink}`
                    );
                }
            } else {
                // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö
                let message = `üîç –ù–∞–π–¥–µ–Ω–æ ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≥—Ä—É–ø–ø—ã ${group}:\n\n`;
                for (let i = 0; i < matches.length; i++) {
                    message += `${i + 1}. '${matches[i].keyword}' - ${matches[i].commentLink}\n`;
                }
                await safeSendMessage(TARGET_GROUP, message);
            }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        pendingMatches.comments = [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
async function checkCommentsWithTimeout(message, group, entity) {
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–≤ –º—Å)
    const MAX_COMMENTS_CHECK_TIME = 15000; // 15 —Å–µ–∫—É–Ω–¥

    return new Promise((resolve) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const timeoutId = setTimeout(() => {
            console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}], –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`);
            resolve();
        }, MAX_COMMENTS_CHECK_TIME);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        (async () => {
            try {
                console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]...`);
                console.log(`–ï—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è replies:`, !!message.replies);

                if (message.replies && message.replies.replies > 0) {
                    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                    const comments = await client.getMessages(entity, {
                        replyTo: message.id,
                        limit: config.messageLimit || 20 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    });

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    await delay(1000);

                    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]`);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    for (const comment of comments) {
                        if (comment.message) {
                            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π [ID: ${comment.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...`);

                            for (const commentKeyword of config.commentKeywords) {
                                const commentRegex = new RegExp(commentKeyword, 'i');

                                if (commentRegex.test(comment.message)) {
                                    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${commentKeyword}' –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ [ID: ${comment.id}]`);

                                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                    const groupName = getChannelNameFromLink(group);
                                    const commentLink = `https://t.me/${groupName}/${message.id}?comment=${comment.id}`;

                                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                    const maxCommentLength = 1000;
                                    let commentText = comment.message;

                                    if (commentText.length > maxCommentLength - 100) {
                                        commentText = commentText.substring(0, maxCommentLength - 150) + '...\n[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω]';
                                    }

                                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                                    pendingMatches.comments.push({
                                        group,
                                        keyword: commentKeyword,
                                        commentText,
                                        commentLink,
                                        messageId: message.id,
                                        commentId: comment.id
                                    });

                                    break;
                                }
                            }
                        }
                    }
                } else {
                    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã`);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]:`, error);
            } finally {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                clearTimeout(timeoutId);
                resolve();
            }
        })();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
async function checkMessageForKeywords(message, group, entity) {
    try {
        console.log(`–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.message.substring(0, 100)}...`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for (const keyword of config.keywords) {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            const regex = new RegExp(keyword, 'i');
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '${keyword}'`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            if (regex.test(message.message)) {
                console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}`);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const groupName = getChannelNameFromLink(group);
                const messageLink = `https://t.me/${groupName}/${message.id}`;

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                const maxMessageLength = 3000;
                let messageText = message.message;

                if (messageText.length > maxMessageLength - 200) {
                    messageText = messageText.substring(0, maxMessageLength - 250) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]';
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                pendingMatches.keywords.push({
                    group,
                    keyword,
                    messageText,
                    messageLink
                });

                break;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (config.commentKeywords.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            await checkCommentsWithTimeout(message, group, entity);
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è [ID: ${message.id}]:`, error);
    }
}


// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞)
let monitoringStats = {
    totalChecks: 0,         // –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
    messagesProcessed: 0,   // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    matchesFound: 0,        // –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    lastCheck: null         // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function checkNewMessages() {
    if (!isMonitoringActive) {
        console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return { totalProcessed: 0, matchesFound: 0 };
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
    let totalProcessed = 0;
    let matchesFound = 0;

    try {
        // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        pendingMatches = {
            keywords: [],
            comments: []
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        for (const group of config.monitoredGroups) {
            try {
                const result = await checkGroupMessages(group);
                if (result && result.processed) {
                    totalProcessed += result.processed;
                }

                // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
                console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã ${group} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result ? result.processed : 0} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã ${group}:`, error);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            await delay(1000);
        }

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        matchesFound = pendingMatches.keywords.length + pendingMatches.comments.length;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (matchesFound > 0) {
            await sendPendingMatches();
        }

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ ${matchesFound} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.`);

        return { totalProcessed, matchesFound };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        return { totalProcessed, matchesFound, error: error.message };
    } finally {
        isChecking = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
    if (isMonitoringActive) {
        return '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!';
    }

    isMonitoringActive = true;
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try {
        await safeSendMessage(TARGET_GROUP, '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        runCheckProcess();
    }, 10000);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    monitoringInterval = setInterval(() => {
        if (!isChecking) {
            runCheckProcess();
        } else {
            console.log('–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
        }
    }, config.checkInterval * 60 * 1000);

    return '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.';
}

// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
let isChecking = false;

function runCheckProcess() {
    if (isChecking) {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }

    isChecking = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    setTimeout(async () => {
        try {
            const result = await checkNewMessages().catch(console.error);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            if (result) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤
                let msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–π';
                if (result.totalProcessed % 10 === 1 && result.totalProcessed % 100 !== 11) {
                    msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–µ';
                } else if ([2, 3, 4].includes(result.totalProcessed % 10) &&
                    ![12, 13, 14].includes(result.totalProcessed % 100)) {
                    msgForm = '—Å–æ–æ–±—â–µ–Ω–∏—è';
                }

                let matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π';
                if (result.matchesFound % 10 === 1 && result.matchesFound % 100 !== 11) {
                    matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
                } else if ([2, 3, 4].includes(result.matchesFound % 10) &&
                    ![12, 13, 14].includes(result.matchesFound % 100)) {
                    matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è';
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                if (result.totalProcessed > 0 || result.matchesFound > 0) {
                    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.totalProcessed} ${msgForm}, –Ω–∞–π–¥–µ–Ω–æ ${result.matchesFound} ${matchForm}.`;
                    await safeSendMessage(TARGET_GROUP, message);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            await safeSendMessage(TARGET_GROUP, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
        } finally {
            isChecking = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        }
    }, 0);
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
const MAX_MESSAGES_PER_CHECK = 5;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
async function checkGroupMessages(group) {
    try {
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É ${group}...`);
        let processed = 0;

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        const channelName = getChannelNameFromLink(group);

        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
        const entity = await safeApiRequest(
            async () => await client.getEntity(channelName),
            null,
            30000 // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
        );

        if (!entity) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –≥—Ä—É–ø–ø—ã ${group}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return { processed: 0 };
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let lastMessageData = await LastMessage.findOne({ groupId: group });

        if (!lastMessageData) {
            lastMessageData = new LastMessage({ groupId: group, lastMessageId: 0 });
            await lastMessageData.save();
        }

        const lastMessageId = lastMessageData.lastMessageId;

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
        const messages = await getMessagesWithTimeout(entity, { limit: config.messageLimit || 20 }, 30000);

        if (messages.length === 0) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã ${group} –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞`);
            return { processed: 0 };
        }

        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${group}`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        await delay(1000);

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        for (const message of [...messages].reverse()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (message.id <= lastMessageId) {
                console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}], —Ç.–∫. –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastMessageId})`);
                continue;
            }

            processed++;

            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await LastMessage.findOneAndUpdate(
                { groupId: group },
                { lastMessageId: message.id },
                { upsert: true }
            );

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if (message.message) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                await checkMessageKeywords(message, group, entity);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            await delay(200);
        }

        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã ${group} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`);
        return { processed };
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã ${group}:`, error);
        return { processed: 0, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
async function checkMessageKeywords(message, group, entity) {
    try {
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...`);
        console.log(`–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.message.substring(0, 100)}...`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for (const keyword of config.keywords) {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            const regex = new RegExp(keyword, 'i');
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '${keyword}'`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            if (regex.test(message.message)) {
                console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${keyword}' –≤ –≥—Ä—É–ø–ø–µ ${group}`);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const groupName = getChannelNameFromLink(group);
                const messageLink = `https://t.me/${groupName}/${message.id}`;

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                const maxMessageLength = 3000;
                let messageText = message.message;

                if (messageText.length > maxMessageLength - 200) {
                    messageText = messageText.substring(0, maxMessageLength - 250) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]';
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                pendingMatches.keywords.push({
                    group,
                    keyword,
                    messageText,
                    messageLink
                });

                break;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (config.commentKeywords.length > 0) {
            await checkCommentsWithSafetyTimeout(message, group, entity);
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ [ID: ${message.id}]:`, error);
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
async function checkCommentsWithSafetyTimeout(message, group, entity) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]...`);
    console.log(`–ï—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è replies:`, !!message.replies);

    if (!message.replies || !message.replies.replies || message.replies.replies === 0) {
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ [ID: ${message.id}] –Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞
        const comments = await getMessagesWithTimeout(
            entity,
            { replyTo: message.id, limit: config.messageLimit || 50 },
            30000 // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        );

        if (comments.length === 0) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}] –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç`);
            return;
        }

        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        for (const comment of comments) {
            if (comment.message) {
                console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π [ID: ${comment.id}] –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...`);

                for (const commentKeyword of config.commentKeywords) {
                    const commentRegex = new RegExp(commentKeyword, 'i');

                    if (commentRegex.test(comment.message)) {
                        console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${commentKeyword}' –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ [ID: ${comment.id}]`);

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        const groupName = getChannelNameFromLink(group);
                        const commentLink = `https://t.me/${groupName}/${message.id}?comment=${comment.id}`;

                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        const maxCommentLength = 1000;
                        let commentText = comment.message;

                        if (commentText.length > maxCommentLength - 100) {
                            commentText = commentText.substring(0, maxCommentLength - 150) + '...\n[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω]';
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        pendingMatches.comments.push({
                            group,
                            keyword: commentKeyword,
                            commentText,
                            commentLink,
                            messageId: message.id,
                            commentId: comment.id
                        });

                        break; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    }
                }
            }
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é [ID: ${message.id}]:`, error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
async function getChannelIdByInviteLink(inviteLink) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
        let inviteHash = '';
        if (inviteLink.includes('/+')) {
            inviteHash = inviteLink.split('/+')[1];
        } else if (inviteLink.includes('/joinchat/')) {
            inviteHash = inviteLink.split('/joinchat/')[1];
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ checkChatInvite –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        const chatInvite = await client.invoke(
            new Api.messages.CheckChatInvite({
                hash: inviteHash
            })
        );

        // –ï—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        if (chatInvite.chat) {
            const id = chatInvite.chat.id;

            if (chatInvite.chat._ === 'channel' || chatInvite.chat._ === 'channelForbidden' || chatInvite.chat.megagroup === true) {
                return `-100${Math.abs(id)}`
            }
            return id.toString();
        } else {
            // –ï—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            const updates = await client.invoke(
                new Api.messages.ImportChatInvite({
                    hash: inviteHash
                })
            );

            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (updates.chats && updates.chats.length > 0) {
                return updates.chats[0].id.toString();
            }
        }

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
async function getChannelIdIfMember(channelLink) {
    try {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
        if (channelLink.startsWith('@') || channelLink.includes('t.me/') && !channelLink.includes('/+') && !channelLink.includes('/joinchat/')) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
            const channelName = getChannelNameFromLink(channelLink);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            const entity = await client.getEntity(channelName);
            return entity.id.toString();
        }
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        else if (channelLink.includes('/+') || channelLink.includes('/joinchat/')) {
            return await getChannelIdByInviteLink(channelLink);
        }
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ ID –∫–∞–Ω–∞–ª–∞
        else if (channelLink.startsWith('-100')) {
            return channelLink;
        }

        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function stopMonitoring() {
    if (!isMonitoringActive) {
        return '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!';
    }

    isMonitoringActive = false;

    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
    }

    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return 'üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_monitoring';
}

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setUserState(userId, state) {
    userStates[userId] = state;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(userId) {
    return userStates[userId] || {};
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
const mainMenuKeyboard = Markup.keyboard([
    ['‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üìã –ì—Ä—É–ø–ø—ã'],
    ['üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ['üìä –°—Ç–∞—Ç—É—Å', '‚ùì –ü–æ–º–æ—â—å']
]).resize();

const controlMenuKeyboard = Markup.keyboard([
    ['‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'],
    ['üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const groupsMenuKeyboard = Markup.keyboard([
    ['üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', 'üÜî –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const keywordsMenuKeyboard = Markup.keyboard([
    ['üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'],
    ['üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'],
    ['‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

const settingsMenuKeyboard = Markup.keyboard([
    ['‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', 'üìÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'],
    ['üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏', '‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]).resize();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu(ctx) {
    return ctx.reply(
        'üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:',
        mainMenuKeyboard
    );
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
bot.command('start', (ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:\n\n' +

        'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:\n' +
        '‚ñ∂Ô∏è /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '‚èπÔ∏è /stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        'üîç /check_now - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å\n' +
        'üìä /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n' +

        'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:\n' +
        'üìã /list_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        '‚ûï /add_group [—Å—Å—ã–ª–∫–∞] - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
        '‚ûñ /remove_group [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        'üÜî /get_channel_id [—Å—Å—ã–ª–∫–∞] - –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)\n\n' +

        'üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n' +
        'üìù /list_keywords - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n' +
        '‚ûï /add_keyword [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '‚ûñ /remove_keyword [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n\n' +

        'üí¨ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n' +
        'üìù /list_comment_keywords - –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n' +
        '‚ûï /add_comment_keyword [—Å–ª–æ–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n' +
        '‚ûñ /remove_comment_keyword [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n\n' +

        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å:\n' +
        '‚öôÔ∏è /set_interval [–º–∏–Ω—É—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n' +
        'üìÑ /set_message_limit [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
        'üîÑ /reset_counters - –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
    ).then(() => {
        showMainMenu(ctx);
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ ID –∫–∞–Ω–∞–ª–∞
bot.command('get_channel_id', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n–ü—Ä–∏–º–µ—Ä: /get_channel_id https://t.me/+abcdefghijkl');
        }

        const channelLink = args[1];
        const channelId = await getChannelIdIfMember(channelLink);

        await safeSendMessage(ctx.chat.id, `üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: /add_group ${channelId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞:', error);
        await safeSendMessage(ctx.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('start_monitoring', async (ctx) => {
    try {
        const result = await startMonitoring();
        await safeSendMessage(ctx.chat.id, result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('stop_monitoring', async (ctx) => {
    try {
        const result = stopMonitoring();
        await safeSendMessage(ctx.chat.id, result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_now
bot.command('check_now', async (ctx) => {
    try {
        await safeSendMessage(ctx.chat.id, 'üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');

        if (isChecking) {
            await safeSendMessage(ctx.chat.id, '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
            return;
        }

        isChecking = true;
        const result = await checkNewMessages().catch(console.error);

        if (result) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            let msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–π';
            if (result.totalProcessed % 10 === 1 && result.totalProcessed % 100 !== 11) {
                msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–µ';
            } else if ([2, 3, 4].includes(result.totalProcessed % 10) &&
                ![12, 13, 14].includes(result.totalProcessed % 100)) {
                msgForm = '—Å–æ–æ–±—â–µ–Ω–∏—è';
            }

            let matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π';
            if (result.matchesFound % 10 === 1 && result.matchesFound % 100 !== 11) {
                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
            } else if ([2, 3, 4].includes(result.matchesFound % 10) &&
                ![12, 13, 14].includes(result.matchesFound % 100)) {
                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è';
            }

            const message = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.totalProcessed} ${msgForm}, –Ω–∞–π–¥–µ–Ω–æ ${result.matchesFound} ${matchForm}.`;
            await safeSendMessage(ctx.chat.id, message);
        } else {
            await safeSendMessage(ctx.chat.id, '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
    } finally {
        isChecking = false;
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
bot.command('add_keyword', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /add_keyword javascript');
        }

        const newKeyword = args.slice(1).join(' ');

        if (!config.keywords.includes(newKeyword)) {
            config.keywords.push(newKeyword);
            await saveConfig();
            await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        } else {
            await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
bot.command('remove_keyword', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove_keyword 1');
        }

        const keywordIndex = parseInt(args[1]) - 1;

        if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.keywords.length) {
            return safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.keywords.length}.`);
        }

        const removedKeyword = config.keywords[keywordIndex];
        config.keywords.splice(keywordIndex, 1);
        await saveConfig();

        await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.command('list_keywords', async (ctx) => {
    try {
        if (config.keywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        config.keywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
        });

        await safeSendMessage(ctx.chat.id, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('add_group', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /add_group @channel_name –∏–ª–∏ /add_group https://t.me/channel_name');
        }

        const newGroup = args[1];

        if (!config.monitoredGroups.includes(newGroup)) {
            config.monitoredGroups.push(newGroup);
            await saveConfig();

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await LastMessage.findOneAndUpdate(
                { groupId: newGroup },
                { lastMessageId: 0 },
                { upsert: true }
            );

            await safeSendMessage(ctx.chat.id, `‚úÖ –ì—Ä—É–ø–ø–∞ ${newGroup} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        } else {
            await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ ${newGroup} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('remove_group', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove_group 1');
        }

        const groupIndex = parseInt(args[1]) - 1;

        if (isNaN(groupIndex) || groupIndex < 0 || groupIndex >= config.monitoredGroups.length) {
            return safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.monitoredGroups.length}.`);
        }

        const removedGroup = config.monitoredGroups[groupIndex];
        config.monitoredGroups.splice(groupIndex, 1);
        await saveConfig();

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await LastMessage.deleteOne({ groupId: removedGroup });

        await safeSendMessage(ctx.chat.id, `‚úÖ –ì—Ä—É–ø–ø–∞ ${removedGroup} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('list_groups', async (ctx) => {
    try {
        if (config.monitoredGroups.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        config.monitoredGroups.forEach((group, index) => {
            message += `${index + 1}. ${group}\n`;
        });

        await safeSendMessage(ctx.chat.id, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.command('set_interval', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: /set_interval 10');
        }

        const newInterval = parseInt(args[1]);

        if (isNaN(newInterval) || newInterval < 1) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
        }

        config.checkInterval = newInterval;
        await saveConfig();

        // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (isMonitoringActive && monitoringInterval) {
            clearInterval(monitoringInterval);
            monitoringInterval = setInterval(async () => {
                await checkNewMessages().catch(console.error);
            }, config.checkInterval * 60 * 1000);
        }

        await safeSendMessage(ctx.chat.id, `‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.command('stats', async (ctx) => {
    try {
        let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        message += `‚úì –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${monitoringStats.totalChecks}\n`;
        message += `üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${monitoringStats.messagesProcessed}\n`;
        message += `üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${monitoringStats.matchesFound}\n`;

        if (monitoringStats.lastCheck) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            const lastCheck = monitoringStats.lastCheck;
            const formattedDate = `${lastCheck.getDate().toString().padStart(2, '0')}.${(lastCheck.getMonth() + 1).toString().padStart(2, '0')}.${lastCheck.getFullYear()} ${lastCheck.getHours().toString().padStart(2, '0')}:${lastCheck.getMinutes().toString().padStart(2, '0')}`;
            message += `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${formattedDate}\n`;
        }

        message += `üì° –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
        message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n`;
        message += `üëÅÔ∏è –ì—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${config.monitoredGroups.length}\n`;
        message += `üî§ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${config.keywords.length}\n`;
        message += `üí¨ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${config.commentKeywords.length}`;

        await safeSendMessage(ctx.chat.id, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
});

bot.command('reset_counters', async (ctx) => {
    try {
        await resetLastMessageIds();
        await safeSendMessage(ctx.chat.id, '‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã reset_counters:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤.');
    }
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
bot.command('list_comment_keywords', async (ctx) => {
    try {
        if (config.commentKeywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
        }

        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
        config.commentKeywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
        });

        await safeSendMessage(ctx.chat.id, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
});

bot.command('add_comment_keyword', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n–ü—Ä–∏–º–µ—Ä: /add_comment_keyword javascript');
        }

        const newKeyword = args.slice(1).join(' ');

        if (!config.commentKeywords.includes(newKeyword)) {
            config.commentKeywords.push(newKeyword);
            await saveConfig();
            await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
        } else {
            await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
});

bot.command('remove_comment_keyword', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n–ü—Ä–∏–º–µ—Ä: /remove_comment_keyword 1');
        }

        const keywordIndex = parseInt(args[1]) - 1;

        if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.commentKeywords.length) {
            return safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${config.commentKeywords.length}.`);
        }

        const removedKeyword = config.commentKeywords[keywordIndex];
        config.commentKeywords.splice(keywordIndex, 1);
        await saveConfig();

        await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.hears('‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', async (ctx) => {
    try {
        await safeSendMessage(ctx.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', controlMenuKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    }
});

bot.hears('üìã –ì—Ä—É–ø–ø—ã', async (ctx) => {
    try {
        await safeSendMessage(ctx.chat.id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', groupsMenuKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –≥—Ä—É–ø–ø:', error);
    }
});

bot.hears('üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', async (ctx) => {
    try {
        await safeSendMessage(ctx.chat.id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:', keywordsMenuKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
    }
});

bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
    try {
        await safeSendMessage(ctx.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', settingsMenuKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
});

bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    try {
        await showMainMenu(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
bot.hears('üìÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π', async (ctx) => {
    try {
        const buttons = [
            [
                Markup.button.callback('10 —Å–æ–æ–±—â–µ–Ω–∏–π', 'set_limit_10'),
                Markup.button.callback('20 —Å–æ–æ–±—â–µ–Ω–∏–π', 'set_limit_20'),
                Markup.button.callback('30 —Å–æ–æ–±—â–µ–Ω–∏–π', 'set_limit_30')
            ],
            [
                Markup.button.callback('50 —Å–æ–æ–±—â–µ–Ω–∏–π', 'set_limit_50'),
                Markup.button.callback('100 —Å–æ–æ–±—â–µ–Ω–∏–π', 'set_limit_100')
            ]
        ];

        await safeSendMessage(
            ctx.chat.id,
            `üìÑ –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: ${config.messageLimit || 20}\n\n` +
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
            '/set_message_limit [—á–∏—Å–ª–æ]',
            Markup.inlineKeyboard(buttons)
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
});

bot.hears('üìä –°—Ç–∞—Ç—É—Å', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        const status = isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

        let message = `üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status}\n`;
        message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n`;
        message += `üëÅÔ∏è –ì—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${config.monitoredGroups.length}\n`;
        message += `üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${config.keywords.length}\n`;
        message += `üí¨ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${config.commentKeywords.length}`;

        const inlineKeyboard = isMonitoringActive
            ? Markup.inlineKeyboard([
                Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring'),
                Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
            ])
            : Markup.inlineKeyboard([
                Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring'),
                Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
            ]);

        await safeSendMessage(ctx.chat.id, message, inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
});

bot.hears('‚ùì –ü–æ–º–æ—â—å', async (ctx) => {
    try {
        await safeSendMessage(
            ctx.chat.id,
            '‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n' +
            '<b>‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> - –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
            '<b>üìã –ì—Ä—É–ø–ø—ã</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
            '<b>üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n' +
            '<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n' +
            '<b>üìä –°—Ç–∞—Ç—É—Å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞\n\n' +
            '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é:\n' +
            '/start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
            '/stop_monitoring - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n' +
            '/check_now - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n' +
            '/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å',
            { parse_mode: 'HTML' }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
bot.hears('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        const result = await startMonitoring();
        await safeSendMessage(ctx.chat.id, result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});

bot.hears('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        const result = stopMonitoring();
        await safeSendMessage(ctx.chat.id, result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"
bot.hears('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');

        if (isChecking) {
            await safeSendMessage(ctx.chat.id, '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        let startMessage = 'üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...';
        if (!isMonitoringActive) {
            startMessage += '\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω. –≠—Ç–æ —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.';
        }

        await safeSendMessage(ctx.chat.id, startMessage);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        isChecking = true;

        // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω
        const wasMonitoringActive = isMonitoringActive;
        if (!wasMonitoringActive) {
            isMonitoringActive = true;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        const result = await checkNewMessages().catch(console.error);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (!wasMonitoringActive) {
            isMonitoringActive = false;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (result) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤
            let msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–π';
            if (result.totalProcessed % 10 === 1 && result.totalProcessed % 100 !== 11) {
                msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–µ';
            } else if ([2, 3, 4].includes(result.totalProcessed % 10) &&
                ![12, 13, 14].includes(result.totalProcessed % 100)) {
                msgForm = '—Å–æ–æ–±—â–µ–Ω–∏—è';
            }

            let matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π';
            if (result.matchesFound % 10 === 1 && result.matchesFound % 100 !== 11) {
                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
            } else if ([2, 3, 4].includes(result.matchesFound % 10) &&
                ![12, 13, 14].includes(result.matchesFound % 100)) {
                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è';
            }

            let message = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.totalProcessed} ${msgForm}, –Ω–∞–π–¥–µ–Ω–æ ${result.matchesFound} ${matchForm}.`;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω
            if (!wasMonitoringActive) {
                message += '\n‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.';
            }

            await safeSendMessage(ctx.chat.id, message);
        } else {
            let message = '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω
            if (!wasMonitoringActive) {
                message += '\n‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.';
            }

            await safeSendMessage(ctx.chat.id, message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    } finally {
        isChecking = false;
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
bot.hears('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.monitoredGroups.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        const buttons = [];

        config.monitoredGroups.forEach((group, index) => {
            message += `${index + 1}. ${group}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_group_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', 'add_group_dialog')]
        ]);

        await safeSendMessage(ctx.chat.id, message, inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.');
    }
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
        setUserState(ctx.from.id, { waitingForGroup: true });

        await safeSendMessage(
            ctx.chat.id,
            '‚ûï –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n' +
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
            '- @channel_name\n' +
            '- https://t.me/channel_name\n' +
            '- https://t.me/+abcdefghijkl (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n' +
            '- ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –≤—ã –µ–≥–æ –∑–Ω–∞–µ—Ç–µ)'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
    }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.monitoredGroups.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
        const buttons = [];

        config.monitoredGroups.forEach((group, index) => {
            message += `${index + 1}. ${group}\n`;
            buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${group}`, `remove_group_${index}`)]);
        });

        await safeSendMessage(ctx.chat.id, message, Markup.inlineKeyboard(buttons));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
});

bot.hears('üÜî –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞', async (ctx) => {
    try {
        setUserState(ctx.from.id, { waitingForChannelLink: true });
        await safeSendMessage(
            ctx.chat.id,
            'üÜî –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.\n' +
            '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
bot.hears('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.keywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
        const buttons = [];

        config.keywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_keyword_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_keyword_dialog')]
        ]);

        await safeSendMessage(ctx.chat.id, message, inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.');
    }
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        await safeSendMessage(
            ctx.chat.id,
            '‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
            '/add_keyword javascript\n\n' +
            '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n' +
            '/add_keyword javascript, python, telegram'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
    }
});

bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.keywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        }

        let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
        const buttons = [];

        config.keywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${keyword}`, `remove_keyword_${index}`)]);
        });

        await safeSendMessage(ctx.chat.id, message, Markup.inlineKeyboard(buttons));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.hears('‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        const buttons = [
            [
                Markup.button.callback('1 –º–∏–Ω—É—Ç–∞', 'set_interval_1'),
                Markup.button.callback('5 –º–∏–Ω—É—Ç', 'set_interval_5'),
                Markup.button.callback('10 –º–∏–Ω—É—Ç', 'set_interval_10')
            ],
            [
                Markup.button.callback('15 –º–∏–Ω—É—Ç', 'set_interval_15'),
                Markup.button.callback('30 –º–∏–Ω—É—Ç', 'set_interval_30'),
                Markup.button.callback('1 —á–∞—Å', 'set_interval_60')
            ]
        ];

        await safeSendMessage(
            ctx.chat.id,
            `‚è±Ô∏è –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.checkInterval} –º–∏–Ω—É—Ç\n\n` +
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
            '/set_interval [–º–∏–Ω—É—Ç—ã]',
            Markup.inlineKeyboard(buttons)
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
bot.hears('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.commentKeywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
        }

        let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
        const buttons = [];

        config.commentKeywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_comment_keyword_${index}`)]);
        });

        const inlineKeyboard = Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_comment_keyword_dialog')]
        ]);

        await safeSendMessage(ctx.chat.id, message, inlineKeyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
});

bot.hears('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏', async (ctx) => {
    try {
        await safeSendMessage(
            ctx.chat.id,
            '‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π?\n' +
            '–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', 'reset_counters_confirm'),
                Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'reset_counters_cancel')
            ])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        await safeSendMessage(
            ctx.chat.id,
            '‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
            '/add_comment_keyword javascript\n\n' +
            '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n' +
            '/add_comment_keyword javascript, python, telegram'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    }
});

bot.hears('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', async (ctx) => {
    try {
        ctx.replyWithChatAction('typing');
        if (config.commentKeywords.length === 0) {
            return safeSendMessage(ctx.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
        }

        let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
        const buttons = [];

        config.commentKeywords.forEach((keyword, index) => {
            message += `${index + 1}. ${keyword}\n`;
            buttons.push([Markup.button.callback(`‚ùå ${index + 1}. ${keyword}`, `remove_comment_keyword_${index}`)]);
        });

        await safeSendMessage(ctx.chat.id, message, Markup.inlineKeyboard(buttons));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞"
bot.hears('üÜî –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞', async (ctx) => {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        setUserState(ctx.from.id, { waitingForChannelLink: true });

        await safeSendMessage(
            ctx.chat.id,
            'üÜî –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.\n' +
            '–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞:\n' +
            '- @channel_name\n' +
            '- https://t.me/channel_name\n' +
            '- https://t.me/+abcdefghijkl (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n\n' +
            '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞.');
    }
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.action('start_monitoring', async (ctx) => {
    try {
        await ctx.answerCbQuery('–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
        const result = await startMonitoring();
        await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n' + result);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([
            Markup.button.callback('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ]).reply_markup);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
bot.action('reset_counters_confirm', async (ctx) => {
    try {
        await ctx.answerCbQuery('–°–±—Ä–∞—Å—ã–≤–∞—é —Å—á–µ—Ç—á–∏–∫–∏...');
        await resetLastMessageIds();
        await ctx.editMessageText('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤.');
    }
});

bot.action('reset_counters_cancel', async (ctx) => {
    try {
        await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await ctx.editMessageText('‚ùå –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
const limitPattern = /set_limit_(\d+)/;
bot.action(limitPattern, async (ctx) => {
    try {
        const match = ctx.callbackQuery.data.match(limitPattern);
        if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

        const newLimit = parseInt(match[1]);

        if (isNaN(newLimit) || newLimit < 1) {
            return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç!');
        }

        config.messageLimit = newLimit;
        await saveConfig();

        await ctx.answerCbQuery(`–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newLimit}!`);
        await ctx.editMessageText(`üìÑ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newLimit}.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
});

bot.action('stop_monitoring', async (ctx) => {
    try {
        await ctx.answerCbQuery('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
        const result = stopMonitoring();
        await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n' + result);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([
            Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring'),
            Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'check_now')
        ]).reply_markup);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"
bot.action('check_now', async (ctx) => {
    try {
        await ctx.answerCbQuery('–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (isChecking) {
            await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
            return;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        const monitoringStatus = isMonitoringActive ?
            '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω.' :
            '‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.';

        await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\nüîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n' + monitoringStatus);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        setTimeout(async () => {
            isChecking = true;
            try {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                const wasMonitoringActive = isMonitoringActive;
                if (!wasMonitoringActive) {
                    isMonitoringActive = true;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                const result = await checkNewMessages().catch(console.error);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if (!wasMonitoringActive) {
                    isMonitoringActive = false;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                let resultMessage = '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';

                if (result) {
                    if (result.totalProcessed === 0) {
                        resultMessage += '\nüì≠ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.';
                    } else {
                        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Å–æ–æ–±—â–µ–Ω–∏–π"
                        let msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–π';
                        if (result.totalProcessed % 10 === 1 && result.totalProcessed % 100 !== 11) {
                            msgForm = '—Å–æ–æ–±—â–µ–Ω–∏–µ';
                        } else if ([2, 3, 4].includes(result.totalProcessed % 10) &&
                            ![12, 13, 14].includes(result.totalProcessed % 100)) {
                            msgForm = '—Å–æ–æ–±—â–µ–Ω–∏—è';
                        }

                        resultMessage += `\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.totalProcessed} ${msgForm}, `;

                        if (result.matchesFound > 0) {
                            // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
                            let matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π';
                            if (result.matchesFound % 10 === 1 && result.matchesFound % 100 !== 11) {
                                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
                            } else if ([2, 3, 4].includes(result.matchesFound % 10) &&
                                ![12, 13, 14].includes(result.matchesFound % 100)) {
                                matchForm = '—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è';
                            }

                            resultMessage += `–Ω–∞–π–¥–µ–Ω–æ ${result.matchesFound} ${matchForm}.`;
                        } else {
                            resultMessage += '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if (!wasMonitoringActive) {
                    resultMessage += '\n\n‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.';
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n' + resultMessage);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
                await ctx.editMessageText(ctx.callbackQuery.message.text + '\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.');
            } finally {
                isChecking = false;
            }
        }, 100);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
});
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
bot.action('add_group_dialog', async (ctx) => {
    try {
        await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        setUserState(ctx.from.id, { waitingForGroup: true });

        await safeSendMessage(
            ctx.chat.id,
            '‚ûï –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n' +
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
            '- @channel_name\n' +
            '- https://t.me/channel_name\n' +
            '- ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100xxxxxxxxxx'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.');
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
bot.action('add_keyword_dialog', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserState(ctx.from.id, { waitingForKeyword: true });
        await safeSendMessage(ctx.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
const groupRemovePattern = /remove_group_(\d+)/;
bot.action(groupRemovePattern, async (ctx) => {
    try {
        const match = ctx.callbackQuery.data.match(groupRemovePattern);
        if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

        const groupIndex = parseInt(match[1]);

        if (isNaN(groupIndex) || groupIndex < 0 || groupIndex >= config.monitoredGroups.length) {
            return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!');
        }

        const removedGroup = config.monitoredGroups[groupIndex];
        config.monitoredGroups.splice(groupIndex, 1);
        await saveConfig();

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await LastMessage.deleteOne({ groupId: removedGroup });

        await ctx.answerCbQuery(`–ì—Ä—É–ø–ø–∞ ${removedGroup} —É–¥–∞–ª–µ–Ω–∞!`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (config.monitoredGroups.length === 0) {
            await ctx.editMessageText('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        } else {
            let message = 'üìã –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
            const buttons = [];

            config.monitoredGroups.forEach((group, index) => {
                message += `${index + 1}. ${group}\n`;
                buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_group_${index}`)]);
            });

            const inlineKeyboard = Markup.inlineKeyboard([
                ...buttons,
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', 'add_group_dialog')]
            ]);

            await ctx.editMessageText(message, inlineKeyboard);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
const keywordRemovePattern = /remove_keyword_(\d+)/;
bot.action(keywordRemovePattern, async (ctx) => {
    try {
        const match = ctx.callbackQuery.data.match(keywordRemovePattern);
        if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

        const keywordIndex = parseInt(match[1]);

        if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.keywords.length) {
            return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞!');
        }

        const removedKeyword = config.keywords[keywordIndex];
        config.keywords.splice(keywordIndex, 1);
        await saveConfig();

        await ctx.answerCbQuery(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ!`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (config.keywords.length === 0) {
            await ctx.editMessageText('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.');
        } else {
            let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n';
            const buttons = [];

            config.keywords.forEach((keyword, index) => {
                message += `${index + 1}. ${keyword}\n`;
                buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_keyword_${index}`)]);
            });

            const inlineKeyboard = Markup.inlineKeyboard([
                ...buttons,
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_keyword_dialog')]
            ]);

            await ctx.editMessageText(message, inlineKeyboard);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
const intervalPattern = /set_interval_(\d+)/;
bot.action(intervalPattern, async (ctx) => {
    try {
        const match = ctx.callbackQuery.data.match(intervalPattern);
        if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

        const newInterval = parseInt(match[1]);

        if (isNaN(newInterval) || newInterval < 1) {
            return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª!');
        }

        config.checkInterval = newInterval;
        await saveConfig();

        // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (isMonitoringActive && monitoringInterval) {
            clearInterval(monitoringInterval);
            monitoringInterval = setInterval(async () => {
                await checkNewMessages().catch(console.error);
            }, config.checkInterval * 60 * 1000);
        }

        await ctx.answerCbQuery(`–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç!`);
        await ctx.editMessageText(`‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} –º–∏–Ω—É—Ç.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
bot.action('add_comment_keyword_dialog', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        setUserState(ctx.from.id, { waitingForCommentKeyword: true });
        await safeSendMessage(ctx.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const commentKeywordRemovePattern = /remove_comment_keyword_(\d+)/;
bot.action(commentKeywordRemovePattern, async (ctx) => {
    try {
        const match = ctx.callbackQuery.data.match(commentKeywordRemovePattern);
        if (!match) return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');

        const keywordIndex = parseInt(match[1]);

        if (isNaN(keywordIndex) || keywordIndex < 0 || keywordIndex >= config.commentKeywords.length) {
            return await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞!');
        }

        const removedKeyword = config.commentKeywords[keywordIndex];
        config.commentKeywords.splice(keywordIndex, 1);
        await saveConfig();

        await ctx.answerCbQuery(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${removedKeyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (config.commentKeywords.length === 0) {
            await ctx.editMessageText('üìù –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç.');
        } else {
            let message = 'üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n';
            const buttons = [];

            config.commentKeywords.forEach((keyword, index) => {
                message += `${index + 1}. ${keyword}\n`;
                buttons.push([Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å ${index + 1}`, `remove_comment_keyword_${index}`)]);
            });

            const inlineKeyboard = Markup.inlineKeyboard([
                ...buttons,
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'add_comment_keyword_dialog')]
            ]);

            await ctx.editMessageText(message, inlineKeyboard);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.on('text', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const state = getUserState(ctx.from.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
        if (state.waitingForChannelLink) {
            const channelLink = ctx.message.text.trim();

            try {
                const channelId = await getChannelIdIfMember(channelLink);
                await safeSendMessage(
                    ctx.chat.id,
                    `üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: /add_group ${channelId}`
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞:', error);
                await safeSendMessage(
                    ctx.chat.id,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞: ${error.message}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.`
                );
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            setUserState(ctx.from.id, {});
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        if (state.waitingForGroup) {
            // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            const newGroup = ctx.message.text.trim();

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)
                let groupToAdd = newGroup;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if (!config.monitoredGroups.includes(groupToAdd)) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    config.monitoredGroups.push(groupToAdd);

                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await LastMessage.findOneAndUpdate(
                        { groupId: groupToAdd },
                        { lastMessageId: 0 },
                        { upsert: true }
                    );

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    await saveConfig();

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    await safeSendMessage(ctx.chat.id, `‚úÖ –ì—Ä—É–ø–ø–∞ ${groupToAdd} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
                } else {
                    // –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                    await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ ${groupToAdd} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
                await safeSendMessage(ctx.chat.id, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: ${error.message}`);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            setUserState(ctx.from.id, {});
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if (state.waitingForKeyword) {
            const newKeyword = ctx.message.text.trim();

            if (!config.keywords.includes(newKeyword)) {
                config.keywords.push(newKeyword);
                await saveConfig();
                await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
            } else {
                await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            setUserState(ctx.from.id, {});
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (state.waitingForCommentKeyword) {
            const newKeyword = ctx.message.text.trim();

            if (!config.commentKeywords.includes(newKeyword)) {
                config.commentKeywords.push(newKeyword);
                await saveConfig();
                await safeSendMessage(ctx.chat.id, `‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
            } else {
                await safeSendMessage(ctx.chat.id, `‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '${newKeyword}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            setUserState(ctx.from.id, {});
            return;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
});

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
async function migrateFromJson() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ MongoDB
        const configExists = await Config.countDocuments();
        const lastMessageExists = await LastMessage.countDocuments();

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ MongoDB, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if (configExists > 0 || lastMessageExists > 0) {
            console.log('–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ MongoDB, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        if (!fs.existsSync('config.json') || !fs.existsSync('last_messages.json')) {
            console.log('–§–∞–π–ª—ã JSON –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
        const configData = JSON.parse(fs.readFileSync('config.json', 'utf-8'));
        const lastMessagesData = JSON.parse(fs.readFileSync('last_messages.json', 'utf-8'));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ MongoDB
        const newConfig = new Config({
            monitoredGroups: configData.monitoredGroups || [],
            keywords: configData.keywords || [],
            commentKeywords: configData.commentKeywords || [],
            checkInterval: configData.checkInterval || 5
        });
        await newConfig.save();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        for (const [groupId, lastMessageId] of Object.entries(lastMessagesData)) {
            const newLastMessage = new LastMessage({
                groupId,
                lastMessageId
            });
            await newLastMessage.save();
        }

        console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ JSON-—Ñ–∞–π–ª–æ–≤
        fs.renameSync('config.json', 'config.json.bak');
        fs.renameSync('last_messages.json', 'last_messages.json.bak');

        console.log('–°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ JSON-—Ñ–∞–π–ª–æ–≤');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function resetLastMessageIds() {
    try {
        await LastMessage.updateMany({}, { lastMessageId: 0 });
        console.log('–°—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        return false;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('reset_counters', async (ctx) => {
    try {
        await resetLastMessageIds();
        await safeSendMessage(ctx.chat.id, '‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã reset_counters:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('set_message_limit', async (ctx) => {
    try {
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ü—Ä–∏–º–µ—Ä: /set_message_limit 50');
        }

        const newLimit = parseInt(args[1]);

        if (isNaN(newLimit) || newLimit < 1) {
            return safeSendMessage(ctx.chat.id, '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
        }

        config.messageLimit = newLimit;
        await saveConfig();

        await safeSendMessage(ctx.chat.id, `üìÑ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newLimit}.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        await safeSendMessage(ctx.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    await migrateFromJson();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const configData = await loadConfig();
    if (configData) {
        config = configData;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    await client.start({
        phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
        password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è): '),
        phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram: '),
        onError: (err) => console.log(err),
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const sessionString = client.session.save();
    fs.writeFileSync(SESSION_FILE, sessionString);

    console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram!');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    try {
        await safeSendMessage(
            TARGET_GROUP,
            'ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
            mainMenuKeyboard
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
    stopMonitoring();
    bot.stop('SIGINT');
    client.disconnect();
    mongoose.connection.close();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
});

process.once('SIGTERM', () => {
    stopMonitoring();
    bot.stop('SIGTERM');
    client.disconnect();
    mongoose.connection.close();
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
});